[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "light-dark-test",
    "section": "",
    "text": "1 Introduction\nThis is an example repo that is used to test (and document) methods for enabling light/dark mode in Quarto documents.\nThis page used Quarto version 1.5.22.\nOur CSS for light and dark mode can be found in aml4td.scss and aml4td-dark.scss, respectively. In Quarto, set these as\nformat:\n  html:\n    theme:\n      light: [simplex, aml4td.scss]\n      dark: [cyborg, aml4td-dark.scss]\nDoing this enables the switch in the upper left-hand side of this page (to the right of light-dark-test and above the search bar).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "index.html#ggplot2",
    "href": "index.html#ggplot2",
    "title": "light-dark-test",
    "section": "1.1 ggplot2",
    "text": "1.1 ggplot2\nThis repo is to test and modify the instructions for light/dark modes from this blog post by Mickaël Canouil.\nWe set the knitr options to use a figures directly to place images.\nInstead of using the default theme for light mode, I’ve created a plot device function that uses a transparent theme. I also like the dark theme provided by ggdark::dark_theme_grey() so I will use that below.\nHere are our light and dark custom devices:\n\nlibrary(svglite)\n\nlightsvglite &lt;- function(file, width, height, ...) {\n  on.exit(ggplot2::reset_theme_settings())\n  \n  theme_transparent &lt;- function(...) {\n    \n    ret &lt;- ggplot2::theme_bw(...)\n    \n    transparent_rect &lt;- ggplot2::element_rect(fill = \"transparent\", colour = NA)\n    ret$panel.background  &lt;- transparent_rect\n    ret$plot.background   &lt;- transparent_rect\n    ret$legend.background &lt;- transparent_rect\n    ret$legend.key        &lt;- transparent_rect\n    \n    ret\n  }\n  \n  ggplot2::theme_set(theme_transparent())\n  ggsave(\n    filename = file, \n    width = width,\n    height = height,\n    dev = \"svg\",\n    bg = \"transparent\",\n    ...\n  )\n}\n\ndarksvglite &lt;- function(file, width, height, ...) {\n  on.exit(ggplot2::reset_theme_settings())\n  ggplot2::theme_set(ggdark::dark_theme_grey())\n  ggsave(\n    filename = file, \n    width = width,\n    height = height,\n    dev = \"svg\",\n    bg = \"transparent\",\n    ...\n  )\n}\n\nNow let’s make a plot and see how it turns out:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "index.html#gt-tables-unresolved",
    "href": "index.html#gt-tables-unresolved",
    "title": "light-dark-test",
    "section": "1.2 gt tables [unresolved]",
    "text": "1.2 gt tables [unresolved]\ngt has a function for dark mode and a general function to style.\nNot sure how to pick up colors from css and there is an unanswered issue on this in GitHub.\n\nmtcars %&gt;%\n  head() %&gt;% \n  gt()\n\n\n\nTable 1.1: Another caption.\n\n\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "index.html#kableextra-tables",
    "href": "index.html#kableextra-tables",
    "title": "light-dark-test",
    "section": "1.3 kableExtra tables",
    "text": "1.3 kableExtra tables\nThis package does have the ability to pick up colors from CSS\n\nmtcars %&gt;%\n  head() %&gt;% \n  kbl() %&gt;% \n  kable_styling(bootstrap_options = \"responsive\", full_width = FALSE)\n\n\n\nTable 1.2: Another caption.\n\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\nMazda RX4\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\nDatsun 710\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\nHornet 4 Drive\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\nHornet Sportabout\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\nValiant\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "index.html#including-pre-made-images-unresolved",
    "href": "index.html#including-pre-made-images-unresolved",
    "title": "light-dark-test",
    "section": "1.4 Including pre-made images [unresolved]",
    "text": "1.4 Including pre-made images [unresolved]\nI usually add pre-made images via knitr::include_graphics(). I don’t see any way to be able to change between light- and dark-friendly versions of the image.\n\nknitr::include_graphics(\"figures/four-panels-1..light.svg\")\n\n\n\n\n\n\n\nFigure 1.1: Turn, turn, turn.\n\n\n\n\n\nAn approach that doesn’t work (yet):\n\nfallback is a diagram\nThe following doesn’t work since this bootstrap variable is in bootstrap 5.3.0 and quarto currently uses 5.1.0.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "index.html#shinylive",
    "href": "index.html#shinylive",
    "title": "light-dark-test",
    "section": "1.5 shinylive",
    "text": "1.5 shinylive\nThe Quarto extension\nSome of this falls on the bslib package function input_dark_mode(), the thematic package’s thematic_shiny(), as well as theming for ggplot visualizations (I’m not sure about lattice or base R plotting code).\nFirst, in your UI code, bslib::input_dark_mode() puts a button in your app to move between light and dark modes.\nSecond, adding thematic::thematic_shiny() to your app (anywhere) will allow shiny to change the appearance of the results depending on the light.dark mode.\nFinally, it also helps to use a ggplot theme that has transparency in the background elements (as we did above) and choosing good colors that are both helpful to colorblindness but also work well in both dark and light mode.\n\n1.5.1 An example\nHere is an example of a shiny app that has a dark mode button and a ggplot visualization that changes with the mode.\n\n\n\n\n#| label: fig-interaction-contours\n#| viewerHeight: 600\n#| standalone: true\n#| echo: true\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(bslib)\nlibrary(thematic)\nlibrary(viridis)\n\n# source(\"https://raw.githubusercontent.com/aml4td/website/dark-mode/R/shiny-setup.R\")\nui &lt;- page_fillable(\n  theme = bs_theme(),   #&lt;- this is new\n  padding = \"1rem\",\n  bslib::input_dark_mode(),\n  layout_columns(\n    fill = FALSE,\n    col_widths = breakpoints(xs = c(-2, 8, -2), sm = 4),\n    sliderInput(\n      \"beta_1\",\n      label = \"Predictor 1 slope\",\n      min = -4.0,\n      max = 4.0,\n      step = 0.5,\n      value = 1\n    ),\n    sliderInput(\n      \"beta_2\",\n      label = \"Predictor 2 slope\",\n      min = -4.0,\n      max = 4.0,\n      step = 0.5,\n      value = 1\n    ),\n    sliderInput(\n      \"beta_int\",\n      label = \"Interaction slope\",\n      min = -2.0,\n      max = 2.0,\n      step = 0.25,\n      value = 0.5\n    )\n  ),\n  as_fill_carrier(plotOutput(\"contours\"))\n)\n\nserver &lt;- function(input, output) {\n  \n  #  Not required but helps\n  theme_transparent &lt;- function(...) {\n    \n    ret &lt;- ggplot2::theme_bw(...)\n    \n    transparent_rect &lt;- ggplot2::element_rect(fill = \"transparent\", colour = NA)\n    ret$panel.background  &lt;- transparent_rect\n    ret$plot.background   &lt;- transparent_rect\n    ret$legend.background &lt;- transparent_rect\n    ret$legend.key        &lt;- transparent_rect\n    \n    ret\n  }\n  \n  theme_set(theme_transparent())\n  \n  # ------------------------------------------------------------------------------\n\n  n_grid &lt;- 100\n  grid_1d &lt;- seq(-1, 1, length.out = n_grid)\n  grid &lt;- expand.grid(A = grid_1d, B = grid_1d)\n  \n  output$contours &lt;-\n    renderPlot({\n\n      grid$outcome &lt;-\n        input$beta_1 * grid$A + input$beta_2 * grid$B +\n        input$beta_int * grid$A * grid$B\n\n      p &lt;-\n        ggplot(grid, aes(A, B)) +\n        coord_equal() +\n        labs(x = \"Predictor 1\", y = \"Predictor 1\")\n\n      if (length(unique(grid$outcome)) &gt;= 15) {\n        p &lt;- p +\n          geom_contour_filled(aes(z = scale(outcome)), bins = 15, show.legend = FALSE) +\n          scale_fill_viridis_d(option = \"G\")\n      }\n\n      print(p)\n\n    })\n}\n\napp &lt;- shinyApp(ui, server)\n\nthematic_shiny()  #&lt;- this is new\n\napp\n\n\n\nFigure 1.2: A caption!\n\n\n\nUnfortunately, this requires a second click (and a pause) to have the shinylive app match the mode of the page.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "index.html#math",
    "href": "index.html#math",
    "title": "light-dark-test",
    "section": "1.6 Math",
    "text": "1.6 Math\nMath coloring appears to be picked up from css:\n\\[\n\\hat{y}_j = \\mu_0 + (\\bar{y}_j - \\mu_0) \\frac{\\sigma^2_0}{\\frac{1}{n} + \\sigma^2_0}\n\\]\nHowever, if you use any \\color invocations, the equation color is fixed across light/dark modes.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "index.html#algorithms",
    "href": "index.html#algorithms",
    "title": "light-dark-test",
    "section": "1.7 algorithms",
    "text": "1.7 algorithms\nThe Quarto extension picks up the correct formatting.\n\n\n\n\n\n\n\n\n\n\\begin{algorithm} \\begin{algorithmic} \\State $\\mathfrak{D}^{tr}$: training set of predictors $X$ and outcome $y$ \\State $B$: number of resamples \\State $M(\\mathfrak{D}^{tr}, B)$: a mapping function to split $\\mathfrak{D}^{tr}$ for each of $B$ iterations. \\State $f()$: model pipeline \\Procedure{Resample}{$\\mathfrak{D}^{tr}, f, M(\\mathfrak{D}^{tr}, B)$} \\For{$b =1$ \\To $B$} \\State Partition $\\mathfrak{D}^{tr}$ into $\\{\\mathfrak{D}_b^{fit}, \\mathfrak{D}_b^{prd}\\}$ using $M_b(\\mathfrak{D}^{tr}, B)$. \\State Train model pipeline $f$ on the analysis set to produce $\\hat{f}_{b}(\\mathfrak{D}_b^{fit})$. \\State Generate assessment set predictions $\\hat{y}_b$ by applying model $\\hat{f}_{b}$ to $\\mathfrak{D}_b^{prd}$. \\State Estimate performance statistic $\\hat{Q}_{b}$. \\EndFor \\State Compute reampling estimate $\\hat{Q} = \\sum_{b=1}^B \\hat{Q}_{b}$. \\Return $\\hat{Q}$. \\Endprocedure \\end{algorithmic} \\end{algorithm}\n\n\n\n\n\n\n\n\nAlgorithm 1.1: Resampling models to estimate performance.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  }
]